{"version":3,"sources":["services/memes.js","components/Meme/MemeElements.js","components/Meme/Meme.js","components/AllMemes/AllMemesElements.js","utils/images/dzida.jpg","utils/images/kwejk.png","components/WebsiteChoose/WebsiteChoose.js","components/AllMemes/AllMemes.js","utils/theme.js","utils/colors.js","layout/Layout.js","pages/MainPage.js","components/ChoosenMeme/ChoosenMemeElements.js","components/ChoosenMeme/ChoosenMeme.js","pages/SingleMemePage.js","App.js","index.js"],"names":["getAll","page","scraperName","a","axios","get","request","data","getSingle","id","MemeContainer","styled","div","props","margin","TitleContainer","theme","colors","darkerBackground","Title","h1","white","Image","img","Meme","title","url","render","history","onClick","push","pickSingleMeme","src","alt","MemesContainer","background","ButtonsContainer","DirectionButton","button","elements","WebsiteChooseContainer","ChooseTitle","WebsiteToChoose","WebsiteChoose","changeScraperDisplay","jebzdzidyLogo","kwejkLogo","AllMemes","pageRefresh","useState","allMemes","setAllMemes","setPage","setScraperName","loading","setLoading","fetchMemes","memeService","memes","results","useEffect","parseInt","window","scrollTo","CircularProgress","color","scaperName","map","meme","photoUrl","previousPage","nextPage","black","offWhite","GlobalStyles","createGlobalStyle","Layout","children","MainPage","match","params","ChoosenMeme","singleMeme","setSingleMeme","result","getSingleMeme","SingleMemePage","App","exact","path","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b53a7cb.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst getAll = async (page, scraperName) => {\r\n  const request = await axios.get(`/memes/${scraperName}?page=${page}&limit=5`);\r\n  return request.data;\r\n};\r\n\r\nconst getSingle = async (id) => {\r\n  const request = await axios.get(`/memes/${id}`);\r\n  return request.data;\r\n};\r\n\r\nexport default { getAll, getSingle };\r\n","import styled from \"styled-components\";\r\n\r\nexport const MemeContainer = styled.div`\r\n  max-width: 60%;\r\n  margin-bottom: ${(props) => props.margin || \"10rem\"};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const TitleContainer = styled.div`\r\n  width: 100%;\r\n  margin-bottom: 0.5rem;\r\n  background: ${({ theme }) => theme.colors.darkerBackground};\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 2rem;\r\n  font-weight: 800;\r\n  text-align: center;\r\n  margin: 1rem;\r\n  color: ${({ theme }) => theme.colors.white};\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n`;\r\n","import React from \"react\";\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { MemeContainer, Title, Image, TitleContainer } from \"./MemeElements\";\r\n\r\nconst pickSingleMeme = (history, id) => {\r\n  <Link to={`/${id}`}></Link>;\r\n  history.push(`/${id}`);\r\n};\r\n\r\nconst Meme = ({ margin, title, url, id }) => {\r\n  return (\r\n    <Route\r\n      render={({ history }) => (\r\n        <MemeContainer\r\n          margin={margin}\r\n          onClick={() => pickSingleMeme(history, id)}\r\n        >\r\n          <TitleContainer>\r\n            <Title>{title}</Title>\r\n          </TitleContainer>\r\n          <Image src={url} alt={title} />\r\n        </MemeContainer>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MemesContainer = styled.div`\r\n  display: flex;\r\n  min-height: 100vh;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.background};\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n  margin-bottom: 10rem;\r\n`;\r\n\r\nexport const DirectionButton = styled.button`\r\n  padding: 1rem 4rem;\r\n  margin: 0 2rem;\r\n  border: none;\r\n  font-size: 1.3rem;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.darkerBackground};\r\n  background: ${({ theme }) => theme.colors.elements};\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/dzida.037ab301.jpg\";","export default __webpack_public_path__ + \"static/media/kwejk.350a24c6.png\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport jebzdzidyLogo from \"../../utils/images/dzida.jpg\";\r\nimport kwejkLogo from \"../../utils/images/kwejk.png\";\r\nimport { Link, Route } from \"react-router-dom\";\r\n\r\nexport const WebsiteChooseContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const ChooseTitle = styled.h1`\r\n  color: ${({ theme }) => theme.colors.white};\r\n  font-size: 1.5rem;\r\n  margin: 3rem 0 2rem 0;\r\n`;\r\n\r\nexport const WebsiteToChoose = styled.img`\r\n  src: ${(props) => props.src};\r\n  cursor: pointer;\r\n  width: 150px;\r\n  height: 65px;\r\n  margin: 1rem 1rem 3rem 1rem;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst WebsiteChoose = ({ changeScraperDisplay }) => {\r\n  return (\r\n    <>\r\n      <ChooseTitle>Wybierz strone</ChooseTitle>\r\n      <WebsiteChooseContainer>\r\n        <Route\r\n          render={({ history }) => (\r\n            <>\r\n              <WebsiteToChoose\r\n                src={jebzdzidyLogo}\r\n                onClick={() => changeScraperDisplay(\"jebzdzidy\", history)}\r\n              />\r\n              <WebsiteToChoose\r\n                src={kwejkLogo}\r\n                onClick={() => changeScraperDisplay(\"kwejk\", history)}\r\n              />\r\n            </>\r\n          )}\r\n        />\r\n      </WebsiteChooseContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WebsiteChoose;\r\n","import memeService from \"../../services/memes\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Meme from \"../Meme/Meme\";\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport {\r\n  MemesContainer,\r\n  ButtonsContainer,\r\n  DirectionButton,\r\n} from \"./AllMemesElements\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport WebsiteChoose from \"../WebsiteChoose/WebsiteChoose\";\r\n\r\nconst AllMemes = ({ pageRefresh }) => {\r\n  const [allMemes, setAllMemes] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [scraperName, setScraperName] = useState(\"jebzdzidy\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchUrlAfterRefresh = () => {\r\n    if (pageRefresh) {\r\n      setPage(parseInt(pageRefresh));\r\n    }\r\n    return;\r\n  };\r\n\r\n  const fetchMemes = async () => {\r\n    const memes = await memeService.getAll(page, scraperName);\r\n    setAllMemes(memes.results);\r\n    setLoading(false);\r\n  };\r\n\r\n  const changeScraperDisplay = (scaperName, history) => {\r\n    setPage(1);\r\n    <Link to={\"/page/1\"}></Link>;\r\n    history.push(`/page/1`);\r\n    setScraperName(scaperName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUrlAfterRefresh();\r\n    fetchMemes();\r\n    window.scrollTo(0, 0);\r\n  }, [page, scraperName]);\r\n\r\n  const nextPage = (history) => {\r\n    setPage(page + 1);\r\n    <Link to={`/page/${page + 1}`}></Link>;\r\n    history.push(`/page/${page + 1}`);\r\n  };\r\n\r\n  const previousPage = (history) => {\r\n    if (page > 1) {\r\n      setPage(page - 1);\r\n      <Link to={`/page/${page - 1}`}></Link>;\r\n      history.push(`/page/${page - 1}`);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <MemesContainer>\r\n          <CircularProgress color=\"black\" />\r\n        </MemesContainer>\r\n      ) : (\r\n        <MemesContainer>\r\n          <WebsiteChoose changeScraperDisplay={changeScraperDisplay} />\r\n          {allMemes.map((meme) => (\r\n            <Meme\r\n              key={meme.id}\r\n              title={meme.title}\r\n              url={meme.photoUrl}\r\n              id={meme.id}\r\n            />\r\n          ))}\r\n          <Route\r\n            render={({ history }) => (\r\n              <ButtonsContainer>\r\n                <DirectionButton onClick={() => previousPage(history)}>\r\n                  Poprzednia strona\r\n                </DirectionButton>\r\n                <DirectionButton onClick={() => nextPage(history)}>\r\n                  Następna strona\r\n                </DirectionButton>\r\n              </ButtonsContainer>\r\n            )}\r\n          />\r\n        </MemesContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllMemes;\r\n","import colors from \"./colors\";\r\n\r\nconst theme = {\r\n  colors,\r\n};\r\n\r\nexport default theme;\r\n","export const colors = {\r\n  white: \"#fff\",\r\n  black: \"#000\",\r\n  offWhite: \"#f1eeee\",\r\n  background: \"#46494C\",\r\n  darkerBackground: \"#212125\",\r\n  elements: \"#B49AAF\",\r\n};\r\n\r\nexport default colors;\r\n","import React from \"react\";\r\nimport styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\r\nimport theme from \"../utils/theme\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\nhtml,\r\nbody {\r\n  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n* {\r\n  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    @import url('https://fonts.googleapis.com/css2?family=Rubik:wght@400;700&display=swap');\r\n      @import url(\"https://fonts.googleapis.com/css?family=Montserrat|Roboto\");\r\n      @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap');      margin: 0;\r\n      padding: 0;\r\n      box-sizing: border-box; \r\n      font-family: 'Noto Sans JP', sans-serif;\r\n}\r\n`;\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <>\r\n        <GlobalStyles />\r\n        {children}\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport AllMemes from \"../components/AllMemes/AllMemes\";\r\nimport Layout from \"../layout/Layout\";\r\n\r\nconst MainPage = ({ match }) => {\r\n  return (\r\n    <Layout>\r\n      <AllMemes pageRefresh={match ? match?.params.page : 1} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MemeContainer = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 0;\r\n  background: ${({ theme }) => theme.colors.background};\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Meme from \"../../components/Meme/Meme\";\r\nimport Layout from \"../../layout/Layout\";\r\nimport memeService from \"../../services/memes\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { MemeContainer } from \"./ChoosenMemeElements\";\r\n\r\nconst ChoosenMeme = ({ id }) => {\r\n  const [singleMeme, setSingleMeme] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  //   const id = match.params.id;\r\n\r\n  useEffect(() => {\r\n    async function getSingleMeme() {\r\n      const result = await memeService.getSingle(id);\r\n      setSingleMeme(result);\r\n      setLoading(false);\r\n    }\r\n    getSingleMeme();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <MemeContainer>\r\n          <CircularProgress color=\"black\" />\r\n        </MemeContainer>\r\n      ) : (\r\n        <Layout>\r\n          <MemeContainer>\r\n            <Meme\r\n              margin={\"0\"}\r\n              title={singleMeme.title}\r\n              url={singleMeme.photoUrl}\r\n            />\r\n          </MemeContainer>\r\n        </Layout>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChoosenMeme;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Meme from \"../components/Meme/Meme\";\r\nimport Layout from \"../layout/Layout\";\r\nimport memeService from \"../services/memes\";\r\nimport styled from \"styled-components\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ChoosenMeme from \"../components/ChoosenMeme/ChoosenMeme\";\r\n\r\nconst MemeContainer = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 0;\r\n  background: ${({ theme }) => theme.colors.background};\r\n`;\r\n\r\nconst SingleMemePage = ({ match }) => {\r\n  return (\r\n    <Layout>\r\n      <ChoosenMeme id={match?.params.id} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default SingleMemePage;\r\n","import React from \"react\";\nimport MainPage from \"./pages/MainPage\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport SingleMemePage from \"./pages/SingleMemePage\";\nimport Layout from \"./layout/Layout\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <MainPage />\n          </Route>\n          <Route exact path=\"/page/:page\" component={MainPage} />\n          <Route exact path=\"/:id\" component={SingleMemePage} />\n        </Switch>\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}