{"version":3,"sources":["services/memes.tsx","utils/sizeBreakpoints.tsx","components/Meme/MemeElements.tsx","components/Meme/Meme.tsx","components/AllMemes/AllMemesElements.tsx","utils/images/dzida.jpg","utils/images/kwejk.png","components/WebsiteChoose/WebsiteChooseElements.tsx","reducers/choosenWebsiteReducer.tsx","reducers/rootReducer.tsx","store.tsx","components/WebsiteChoose/WebsiteChoose.tsx","components/AllMemes/AllMemes.tsx","utils/theme.tsx","utils/colors.tsx","layout/Layout.tsx","pages/MainPage.tsx","components/ChoosenMeme/ChoosenMemeElements.tsx","components/ChoosenMeme/ChoosenMeme.tsx","pages/SingleMemePage.tsx","App.tsx","index.tsx"],"names":["getAll","page","scraperName","a","axios","get","request","data","getSingle","id","size","device","mobileS","mobileM","mobileL","tablet","MemeContainer","styled","div","props","margin","TitleContainer","theme","colors","darkerBackground","Title","h1","white","Image","img","Meme","title","url","render","history","onClick","push","pickSingleMeme","src","alt","MemesContainer","background","ButtonsContainer","DirectionButton","button","offWhite","WebsiteChooseContainer","ChooseTitle","ImageContainer","show","WebsiteToChoose","initialState","scraper","choosenWebsiteReducer","state","action","type","payload","rootReducer","combineReducers","choosenWebsite","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","persistor","persistStore","WebsiteChoose","changeScraperDisplay","console","log","dispatch","useDispatch","scraperInStore","getState","handleClick","website","jebzdzidyLogo","kwejkLogo","AllMemes","pageRefresh","useState","allMemes","setAllMemes","setPage","setScraperName","loading","setLoading","fetchMemes","memeService","memes","results","useEffect","parseInt","window","scrollTo","CircularProgress","color","scaperName","map","meme","photoUrl","previousPage","nextPage","black","elements","GlobalStyles","createGlobalStyle","Layout","children","MainPage","match","params","ChoosenMeme","singleMeme","setSingleMeme","result","getSingleMeme","SingleMemePage","App","exact","path","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a1e8967e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst getAll = async (page: number, scraperName: string) => {\r\n  const request = await axios.get(`/memes/${scraperName}?page=${page}&limit=5`);\r\n  return request.data;\r\n};\r\n\r\nconst getSingle = async (id: string) => {\r\n  const request = await axios.get(`/memes/${id}`);\r\n  return request.data;\r\n};\r\n\r\nexport default { getAll, getSingle };\r\n","export const size = {\r\n    mobileS: '320px',\r\n    mobileM: '375px',\r\n    mobileL: '425px',\r\n    tablet: '768px',\r\n  }\r\n\r\n  export const device = {\r\n    mobileS: `(max-width: ${size.mobileS})`,\r\n    mobileM: `(max-width: ${size.mobileM})`,\r\n    mobileL: `(max-width: ${size.mobileL})`,\r\n    tablet: `(max-width: ${size.tablet})`,\r\n  };","import styled from \"styled-components\";\r\nimport { device } from \"../../utils/sizeBreakpoints\";\r\n\r\nexport const MemeContainer = styled.div<{margin: string | undefined }>`\r\n  max-width: 60%;\r\n  margin-bottom: ${(props) => props.margin || \"10rem\"};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n\r\n  @media ${device.tablet} { \r\n    max-width: 80%;\r\n}\r\n\r\n@media ${device.mobileL} { \r\n    max-width: 95%;\r\n}\r\n\r\n`;\r\n\r\nexport const TitleContainer = styled.div`\r\n  width: 100%;\r\n  margin-bottom: 0.5rem;\r\n  background: ${({ theme }) => theme.colors.darkerBackground};\r\n  box-shadow: 0px 0px 3px 3px rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 2rem;\r\n  font-weight: 800;\r\n  text-align: center;\r\n  margin: 1rem;\r\n  color: ${({ theme }) => theme.colors.white};\r\n\r\n  @media ${device.tablet} { \r\n    font-size: 1.7rem;\r\n}\r\n\r\n@media ${device.mobileL} { \r\n  font-size: 1.5rem;\r\n}\r\n\r\n@media ${device.mobileS} { \r\n  font-size: 1.3rem;\r\n}\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  max-width: 600px;\r\n  box-shadow: 0px 0px 3px 3px rgba(0, 0, 0, 0.2);\r\n`;\r\n","import React, { FC } from \"react\";\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { MemeContainer, Title, Image, TitleContainer } from \"./MemeElements\";\r\n\r\ninterface IMeme {\r\n  key?: string;\r\n  title?: string;\r\n  url?: string;\r\n  id?: string;\r\n  margin?: string;\r\n}\r\n\r\n\r\n\r\nconst Meme:FC<IMeme> = ({ margin, title, url, id }) => {\r\n\r\n  const pickSingleMeme = (history: any, id: string | undefined) => {\r\n    <Link to={`/${id}`}></Link>;\r\n    history.push(`/${id}`);\r\n  };\r\n  \r\n  return (\r\n    <Route\r\n      render={({ history }) => (\r\n        <MemeContainer\r\n          margin={margin}\r\n          onClick={() => pickSingleMeme(history, id)}\r\n        >\r\n          <TitleContainer>\r\n            <Title>{title}</Title>\r\n          </TitleContainer>\r\n          <Image src={url} alt={title} />\r\n        </MemeContainer>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n","import styled from \"styled-components\";\r\nimport { device } from \"../../utils/sizeBreakpoints\";\r\n\r\nexport const MemesContainer = styled.div`\r\n  display: flex;\r\n  min-height: 100vh;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.background};\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n  margin-bottom: 10rem;\r\n`;\r\n\r\nexport const DirectionButton = styled.button`\r\n  padding: 1rem 4rem;\r\n  margin: 0 2rem;\r\n  border: none;\r\n  font-size: 1.3rem;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.offWhite};\r\n  background: ${({ theme }) => theme.colors.darkerBackground};\r\n\r\n  @media ${device.tablet} { \r\n    padding: 1rem 2rem;\r\n    margin: 0 1.5rem;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n@media ${device.mobileM} { \r\n    /* padding: 1rem 1.7rem; */\r\n    margin: 0 0.8rem;\r\n    font-size: 1.1rem;\r\n}\r\n\r\n@media ${device.mobileS} { \r\n    /* padding: 1rem 1.7rem; */\r\n    margin: 0 0.6rem;\r\n    font-size: 0.8rem;\r\n    padding: 1rem 0.5rem;\r\n}\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/dzida.037ab301.jpg\";","export default __webpack_public_path__ + \"static/media/kwejk.350a24c6.png\";","import styled from \"styled-components\";\r\nimport {device} from '../../utils/sizeBreakpoints'\r\n\r\nexport const WebsiteChooseContainer = styled.div`\r\n  display: flex;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n\r\n  @media ${device.mobileM} { \r\n    padding: 1.4rem;\r\n}\r\n\r\n\r\n@media ${device.mobileS} { \r\n  padding: 0rem;\r\n}\r\n`;\r\n\r\nexport const ChooseTitle = styled.h1`\r\n  color: ${({ theme }) => theme.colors.white};\r\n  font-size: 1.7rem;\r\n  margin: 4rem 0 2rem 0;\r\n  text-align: center;\r\n\r\n  @media ${device.tablet} { \r\n    font-size: 1.4rem;\r\n  }\r\n\r\n  @media ${device.mobileM} { \r\n    font-size: 1.3rem;\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.div<{show:any}>`\r\n  border-bottom: ${(props) =>\r\n    props.show === \"active\" ? `3px solid #f1eeee` : \"\"};\r\n`;\r\n\r\nexport const WebsiteToChoose = styled.img<{show:any}>`\r\n  src: ${(props) => props.src};\r\n  cursor: pointer;\r\n  width: 150px;\r\n  height: 65px;\r\n  margin: 1rem 1rem 1rem 1rem;\r\n  border-radius: 3px;\r\n  box-shadow: ${(props) =>\r\n    props.show === \"active\"\r\n      ? \"0px 0px 3px 3px rgba(223, 223, 223, 0.1)\"\r\n      : \"0px 0px 3px 3px rgba(0, 0, 0, 0.1)\"};\r\n\r\n  display: inline-block;\r\n  position: relative;\r\n\r\n\r\n  @media ${device.tablet} { \r\n  width: 120px;\r\n  height: 50px\r\n}\r\n\r\n@media ${device.mobileM} { \r\n  margin: 0.5rem 0.5rem 0.5rem 0.5rem;\r\n}\r\n`\r\n;\r\n","const initialState = {\r\n  scraper: \"jebzdzidy\",\r\n};\r\n\r\nconst choosenWebsiteReducer = (state = initialState, action: any) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"CHANGE_SCRAPER\":\r\n      return {\r\n        ...state,\r\n        scraper: payload.scraper,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default choosenWebsiteReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport choosenWebsiteReducer from \"./choosenWebsiteReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  choosenWebsite: choosenWebsiteReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport { createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\nconst store = createStore(persistedReducer, composeWithDevTools());\r\nexport const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React, { FC, useState } from \"react\";\r\nimport jebzdzidyLogo from \"../../utils/images/dzida.jpg\";\r\nimport kwejkLogo from \"../../utils/images/kwejk.png\";\r\nimport { Route } from \"react-router-dom\";\r\nimport {\r\n  WebsiteChooseContainer,\r\n  ChooseTitle,\r\n  WebsiteToChoose,\r\n  ImageContainer,\r\n} from \"./WebsiteChooseElements\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport store from \"../../store\";\r\n\r\ninterface IWebsiteChoose {\r\n  changeScraperDisplay:  {\r\n    (scraperName: string,history: string[]) : void\r\n};\r\n}\r\n\r\nconst WebsiteChoose: FC<IWebsiteChoose> = ({ changeScraperDisplay }) => {\r\n  console.log(typeof changeScraperDisplay, 'changeScraperDisplay website choose' )\r\n  const dispatch = useDispatch();\r\n  const scraperInStore = store.getState().choosenWebsite.scraper;\r\n\r\n  const changeWebsite = (website: string) => {\r\n    console.log(typeof website, 'website website choose')\r\n    dispatch({\r\n      type: \"CHANGE_SCRAPER\",\r\n      payload: {\r\n        scraper: website,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleClick = (scraperName: string, history: string[]) => {\r\n    changeWebsite(scraperName);\r\n    changeScraperDisplay(scraperName, history);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ChooseTitle>Wybierz strone z której chcesz zobaczyć memy</ChooseTitle>\r\n      <WebsiteChooseContainer>\r\n        <Route\r\n          render={({ history }: any) => (\r\n            <>\r\n              <ImageContainer\r\n                show={scraperInStore === \"jebzdzidy\" ? \"active\" : \"\"}\r\n              >\r\n                <WebsiteToChoose\r\n                  show={scraperInStore === \"jebzdzidy\" ? \"active\" : \"\"}\r\n                  src={jebzdzidyLogo}\r\n                  onClick={() => handleClick(\"jebzdzidy\", history)}\r\n                />\r\n              </ImageContainer>\r\n              <ImageContainer show={scraperInStore === \"kwejk\" ? \"active\" : \"\"}>\r\n                <WebsiteToChoose\r\n                  show={scraperInStore === \"kwejk\" ? \"active\" : \"\"}\r\n                  src={kwejkLogo}\r\n                  onClick={() => handleClick(\"kwejk\", history)}\r\n                />\r\n              </ImageContainer>\r\n            </>\r\n          )}\r\n        />\r\n      </WebsiteChooseContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WebsiteChoose;\r\n","import memeService from \"../../services/memes\";\r\nimport React, { useState, useEffect, FC } from \"react\";\r\nimport Meme from \"../../components/Meme/Meme\";\r\nimport { Link, Route, RouteComponentProps } from \"react-router-dom\";\r\nimport {\r\n  MemesContainer,\r\n  ButtonsContainer,\r\n  DirectionButton,\r\n} from \"./AllMemesElements\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport WebsiteChoose from \"../WebsiteChoose/WebsiteChoose\";\r\nimport store from \"../../store\";\r\nimport { StaticContext } from \"react-router\";\r\n\r\n\r\ninterface IAllMemes {\r\n  pageRefresh: any;\r\n  changeScraperDisplay?:  {\r\n    (scraperName: string,history: string[],pageRefresh: string) : void\r\n};\r\n}\r\n\r\ninterface IMeme {\r\n  map(arg0: (meme: any) => JSX.Element): React.ReactNode;\r\n  id:string, title:string, photoUrl:string,\r\n}\r\n\r\nconst AllMemes:FC<IAllMemes> = ({ pageRefresh }) => {\r\n  const [allMemes, setAllMemes] = useState<IMeme>({} as IMeme);\r\n  const [page, setPage] = useState<number>(1);\r\n  const [scraperName, setScraperName] = useState<string>(\"jebzdzidy\");\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  const scraperInStore: string = store.getState().choosenWebsite.scraper;\r\n\r\n  const fetchUrlAfterRefresh = () => {\r\n    if (pageRefresh) {\r\n      setPage(parseInt(pageRefresh));\r\n      setScraperName(scraperInStore);\r\n    }\r\n    return;\r\n  };\r\n\r\n  const fetchMemes = async () => {\r\n    const memes = await memeService.getAll(page, scraperName);\r\n    setAllMemes(memes.results);\r\n    setLoading(false);\r\n  };\r\n\r\n  const changeScraperDisplay = (scaperName: string, history: string[]) => {\r\n    setPage(1);\r\n    <Link to={\"/page/1\"}></Link>;\r\n    history.push(`/page/1`);\r\n    setScraperName(scaperName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUrlAfterRefresh();\r\n    fetchMemes();\r\n    window.scrollTo(0, 0);\r\n  }, [page, scraperName]);\r\n\r\n  const nextPage = (history: string[]) => {\r\n    setPage(page + 1);\r\n    <Link to={`/page/${page + 1}`}></Link>;\r\n    history.push(`/page/${page + 1}`);\r\n  };\r\n\r\n  const previousPage = (history: string[]) => {\r\n    if (page > 1) {\r\n      setPage(page - 1);\r\n      <Link to={`/page/${page - 1}`}></Link>;\r\n      history.push(`/page/${page - 1}`);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <MemesContainer>\r\n          <CircularProgress color=\"secondary\" />\r\n        </MemesContainer>\r\n      ) : (\r\n        <MemesContainer>\r\n          <WebsiteChoose changeScraperDisplay={changeScraperDisplay} />\r\n          {allMemes.map((meme) => (\r\n            <Meme\r\n              key={meme.id}\r\n              title={meme.title}\r\n              url={meme.photoUrl}\r\n              id={meme.id}\r\n            />\r\n          ))}\r\n          <Route\r\n            render={({ history }: any) => (\r\n              <ButtonsContainer>\r\n                <DirectionButton onClick={() => previousPage(history)}>\r\n                  Poprzednia strona\r\n                </DirectionButton>\r\n                <DirectionButton onClick={() => nextPage(history)}>\r\n                  Następna strona\r\n                </DirectionButton>\r\n              </ButtonsContainer>\r\n            )}\r\n          />\r\n        </MemesContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllMemes;\r\n","import colors from \"./colors\";\r\n\r\nconst theme = {\r\n  colors,\r\n};\r\n\r\nexport default theme;\r\n","export const colors = {\r\n  white: \"#fff\",\r\n  black: \"#000\",\r\n  offWhite: \"#f1eeee\",\r\n  background: \"#46494C\",\r\n  darkerBackground: \"#212125\",\r\n  elements: \"#B49AAF\",\r\n};\r\n\r\nexport default colors;\r\n","import React from \"react\";\r\nimport styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\r\nimport theme from \"../utils/theme\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\nhtml,\r\nbody {\r\n  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n* {\r\n  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    @import url('https://fonts.googleapis.com/css2?family=Rubik:wght@400;700&display=swap');\r\n      @import url(\"https://fonts.googleapis.com/css?family=Montserrat|Roboto\");\r\n      @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap');      margin: 0;\r\n      padding: 0;\r\n      box-sizing: border-box; \r\n      font-family: 'Noto Sans JP', sans-serif;\r\n}\r\n`;\r\n\r\nconst Layout = ({ children }: any) => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <>\r\n        <GlobalStyles />\r\n        {children}\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React, { FC } from \"react\";\r\nimport AllMemes from \"../components/AllMemes/AllMemes\";\r\nimport Layout from \"../layout/Layout\";\r\n\r\ninterface IMainPage {\r\n  match?:{\r\n    isExact: boolean\r\n    params: {\r\n      page: string\r\n    }\r\n    path: string\r\n    url: string\r\n  }\r\n}\r\n\r\nconst MainPage:FC<IMainPage> = ({ match }) => {\r\n  console.log(typeof match, 'Main page')\r\n  console.log( match, 'Main page')\r\n  return (\r\n    <Layout>\r\n      <AllMemes pageRefresh={match ? match?.params.page : 1} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MemeContainer = styled.div`\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 0;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  padding: 4rem 0;\r\n`;\r\n","import React, { useState, useEffect, FC } from \"react\";\r\nimport Meme from \"../../components/Meme/Meme\";\r\nimport Layout from \"../../layout/Layout\";\r\nimport memeService from \"../../services/memes\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { MemeContainer } from \"./ChoosenMemeElements\";\r\nimport { stringify } from \"querystring\";\r\n\r\ninterface IChoosenMeme {\r\n  title?: string;\r\n  photoUrl?: string;\r\n  id: string;\r\n}\r\n\r\nconst ChoosenMeme:FC<IChoosenMeme> = ({ id }) => {\r\n  const [singleMeme, setSingleMeme] = useState<IChoosenMeme>({} as IChoosenMeme);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    async function getSingleMeme() {\r\n      const result = await memeService.getSingle(id);\r\n      setSingleMeme(result);\r\n      setLoading(false);\r\n    }\r\n    getSingleMeme();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <MemeContainer>\r\n          <CircularProgress color=\"secondary\" />\r\n        </MemeContainer>\r\n      ) : (\r\n        <Layout>\r\n          <MemeContainer>\r\n            <Meme\r\n              margin={\"0\"}\r\n              title={singleMeme.title}\r\n              url={singleMeme.photoUrl}\r\n            />\r\n          </MemeContainer>\r\n        </Layout>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChoosenMeme;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Meme from \"../components/Meme/Meme\";\r\nimport Layout from \"../layout/Layout\";\r\nimport memeService from \"../services/memes\";\r\nimport styled from \"styled-components\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ChoosenMeme from \"../components/ChoosenMeme/ChoosenMeme\";\r\n\r\nconst MemeContainer = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 0;\r\n  background: ${({ theme }) => theme.colors.background};\r\n`;\r\n\r\nconst SingleMemePage = ({ match }: any) => {\r\n  // console.log(typeof match)\r\n  return (\r\n    <Layout>\r\n      <ChoosenMeme id={match?.params.id} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default SingleMemePage;\r\n","import React from \"react\";\nimport MainPage from \"./pages/MainPage\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SingleMemePage from \"./pages/SingleMemePage\";\nimport Layout from \"./layout/Layout\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <MainPage />\n          </Route>\n          <Route exact path=\"/page/:page\" component={MainPage} />\n          <Route exact path=\"/:id\" component={SingleMemePage} />\n        </Switch>\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}