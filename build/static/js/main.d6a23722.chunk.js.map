{"version":3,"sources":["services/memes.tsx","utils/sizeBreakpoints.tsx","components/Meme/MemeElements.tsx","components/Meme/Meme.tsx","components/AllMemes/AllMemesElements.tsx","utils/images/dzida.jpg","utils/images/kwejk.png","components/WebsiteChoose/WebsiteChooseElements.tsx","reducers/choosenWebsiteReducer.tsx","reducers/rootReducer.tsx","reducers/userReducer.tsx","store.tsx","components/WebsiteChoose/WebsiteChoose.tsx","components/AllMemes/AllMemes.tsx","utils/theme.tsx","utils/colors.tsx","layout/Layout.tsx","components/Button/ButtonElements.tsx","components/Button/Button.tsx","components/ValidatorModal/ValidatorModalElements.tsx","components/ValidatorModal/ValidationModal.tsx","services/userValidation.tsx","components/Logger/LoggerElements.tsx","components/Logger/Logger.tsx","components/LoginAndRegister/LoginAndRegisterElements.tsx","components/LoginAndRegister/LoginAndRegister.tsx","components/UserInterface/UserInterface.tsx","components/LoggedUser/LoggedUserElements.tsx","components/LoggedUser/LoggedUser.tsx","pages/MainPage.tsx","components/ChoosenMeme/ChoosenMemeElements.tsx","components/ChoosenMeme/ChoosenMeme.tsx","pages/SingleMemePage.tsx","components/AddMeme/AddMemeElements.tsx","services/addMeme.tsx","components/AddMeme/AddMeme.tsx","pages/AddMemePage.tsx","App.tsx","index.tsx"],"names":["getAll","page","scraperName","a","axios","get","request","data","getSingle","id","size","device","mobileS","mobileM","mobileL","tablet","MemeContainer","styled","div","props","margin","TitleContainer","theme","colors","darkerBackground","Title","h1","white","Image","img","Meme","title","url","render","history","onClick","push","pickSingleMeme","src","alt","MemesContainer","background","ButtonsContainer","DirectionButton","button","offWhite","WebsiteChooseContainer","ChooseTitle","ImageContainer","show","WebsiteToChoose","initialState","scraper","rootReducer","combineReducers","choosenWebsiteReducer","state","action","type","payload","userReducer","console","log","user","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","persistor","persistStore","WebsiteChoose","changeScraperDisplay","dispatch","useDispatch","scraperInStore","getState","handleClick","website","chooseWebsite","jebzdzidyLogo","kwejkLogo","AllMemes","pageRefresh","useState","allMemes","setAllMemes","setPage","setScraperName","loading","setLoading","fetchMemes","memeService","memes","results","useEffect","parseInt","window","scrollTo","CircularProgress","color","scaperName","map","meme","photoUrl","previousPage","nextPage","black","elements","darkBlue","logout","error","success","GlobalStyles","createGlobalStyle","Layout","children","ButtonStyle","attrs","Button","text","ModalForm","form","InputContainer","Label","label","Input","input","useStyles","makeStyles","createStyles","modal","display","alignItems","marginTop","justifyContent","ValidationModal","operationType","handleValidation","classes","open","setOpen","username","setUsername","password","setPassword","handleClose","handleValidationMethod","event","preventDefault","Modal","aria-labelledby","aria-describedby","className","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","onSubmit","name","placeholder","required","onChange","target","value","login","credentials","post","register","Container","Text","p","Logger","ButtonsWrapper","ButtonAndInfo","LoginAndRegister","registeredUser","setRegisteredUser","registeredUserFailed","setRegisteredUserFailed","loginUserFailed","setLoginUserFailed","isLoginCorrect","setIsLoginCorrect","handleLogin","validationService","loggedUser","setTimeout","handleRegister","UserInterface","handleLogout","localStorage","clear","location","reload","addMeme","UsernameForm","LoggedUser","MainPage","match","useSelector","params","ChoosenMeme","singleMeme","setSingleMeme","result","getSingleMeme","SingleMemePage","AddMemeContainer","InputFile","AddMemeForm","MissingValueError","Success","addMemeToDb","memeObject","config","AddMemePage","image","setImage","setTitle","missingImageErr","setMissingImageErr","missingTitleErr","setMissingTitleErr","succesAdded","setSuccessAdded","headers","Authorization","token","objectToSend","addMemeService","accept","file","URL","createObjectURL","files","handleAddImage","AddMeme","App","exact","path","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d6a23722.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst getAll = async (page: number, scraperName: string) => {\r\n  const request = await axios.get(`/memes/${scraperName}?page=${page}&limit=5`);\r\n  return request.data;\r\n};\r\n\r\nconst getSingle = async (id: string) => {\r\n  const request = await axios.get(`/memes/${id}`);\r\n  return request.data;\r\n};\r\n\r\nexport default { getAll, getSingle };\r\n","export const size = {\r\n    mobileS: '320px',\r\n    mobileM: '375px',\r\n    mobileL: '425px',\r\n    tablet: '768px',\r\n  }\r\n\r\n  export const device = {\r\n    mobileS: `(max-width: ${size.mobileS})`,\r\n    mobileM: `(max-width: ${size.mobileM})`,\r\n    mobileL: `(max-width: ${size.mobileL})`,\r\n    tablet: `(max-width: ${size.tablet})`,\r\n  };","import styled from \"styled-components\";\r\nimport { device } from \"../../utils/sizeBreakpoints\";\r\nimport { Itheme } from \"../../utils/theme\";\r\n\r\nexport const MemeContainer = styled.div<{ margin: string | undefined }>`\r\n  max-width: 60%;\r\n  margin-bottom: ${(props) => props.margin || \"10rem\"};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n\r\n  @media ${device.tablet} {\r\n    max-width: 80%;\r\n  }\r\n\r\n  @media ${device.mobileL} {\r\n    max-width: 95%;\r\n  }\r\n`;\r\n\r\nexport const TitleContainer = styled.div`\r\n  width: 100%;\r\n  margin-bottom: 0.5rem;\r\n  background: ${({ theme }: { theme: Itheme }) =>\r\n    theme.colors.darkerBackground};\r\n  box-shadow: 0px 0px 3px 3px rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  font-size: 2rem;\r\n  font-weight: 800;\r\n  text-align: center;\r\n  margin: 1rem;\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.white};\r\n\r\n  @media ${device.tablet} {\r\n    font-size: 1.7rem;\r\n  }\r\n\r\n  @media ${device.mobileL} {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  @media ${device.mobileS} {\r\n    font-size: 1.3rem;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  max-width: 600px;\r\n  box-shadow: 0px 0px 3px 3px rgba(0, 0, 0, 0.2);\r\n`;\r\n","import React from \"react\";\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { MemeContainer, Title, Image, TitleContainer } from \"./MemeElements\";\r\n\r\ninterface IMeme {\r\n  key?: string;\r\n  title?: string;\r\n  url?: string;\r\n  id?: string;\r\n  margin?: string;\r\n}\r\n\r\nconst Meme = ({ margin, title, url, id }: IMeme) => {\r\n  const pickSingleMeme = (history: any, id: string | undefined) => {\r\n    <Link to={`/${id}`}></Link>;\r\n    history.push(`/${id}`);\r\n  };\r\n\r\n  return (\r\n    <Route\r\n      render={({ history }) => (\r\n        <MemeContainer\r\n          margin={margin}\r\n          onClick={() => pickSingleMeme(history, id)}\r\n        >\r\n          <TitleContainer>\r\n            <Title>{title}</Title>\r\n          </TitleContainer>\r\n          <Image src={url} alt={title} />\r\n        </MemeContainer>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n","import styled from \"styled-components\";\r\nimport { device } from \"../../utils/sizeBreakpoints\";\r\n\r\nexport const MemesContainer = styled.div`\r\n  display: flex;\r\n  min-height: 100vh;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.background};\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n  margin-bottom: 10rem;\r\n`;\r\n\r\nexport const DirectionButton = styled.button`\r\n  padding: 1rem 4rem;\r\n  margin: 0 2rem;\r\n  border: none;\r\n  font-size: 1.3rem;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.offWhite};\r\n  background: ${({ theme }) => theme.colors.darkerBackground};\r\n\r\n  @media ${device.tablet} { \r\n    padding: 1rem 2rem;\r\n    margin: 0 1.5rem;\r\n    font-size: 1.2rem;\r\n}\r\n\r\n@media ${device.mobileM} { \r\n    /* padding: 1rem 1.7rem; */\r\n    margin: 0 0.8rem;\r\n    font-size: 1.1rem;\r\n}\r\n\r\n@media ${device.mobileS} { \r\n    /* padding: 1rem 1.7rem; */\r\n    margin: 0 0.6rem;\r\n    font-size: 0.8rem;\r\n    padding: 1rem 0.5rem;\r\n}\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/dzida.037ab301.jpg\";","export default __webpack_public_path__ + \"static/media/kwejk.350a24c6.png\";","import styled from \"styled-components\";\r\nimport { device } from \"../../utils/sizeBreakpoints\";\r\nimport { Itheme } from \"../../utils/theme\";\r\n\r\nexport const WebsiteChooseContainer = styled.div`\r\n  display: flex;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n\r\n  @media ${device.mobileM} {\r\n    padding: 1.4rem;\r\n  }\r\n\r\n  @media ${device.mobileS} {\r\n    padding: 0rem;\r\n  }\r\n`;\r\n\r\nexport const ChooseTitle = styled.h1`\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.white};\r\n  font-size: 1.7rem;\r\n  margin: 1rem 0 2rem 0;\r\n  text-align: center;\r\n\r\n  @media ${device.tablet} {\r\n    font-size: 1.4rem;\r\n  }\r\n\r\n  @media ${device.mobileM} {\r\n    font-size: 1.3rem;\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.div<{ show: any }>`\r\n  border-bottom: ${(props) =>\r\n    props.show === \"active\" ? `3px solid #f1eeee` : \"\"};\r\n`;\r\n\r\nexport const WebsiteToChoose = styled.img<{ show: any }>`\r\n  src: ${(props) => props.src};\r\n  cursor: pointer;\r\n  width: 150px;\r\n  height: 65px;\r\n  margin: 1rem 1rem 1rem 1rem;\r\n  border-radius: 3px;\r\n  box-shadow: ${(props) =>\r\n    props.show === \"active\"\r\n      ? \"0px 0px 3px 3px rgba(223, 223, 223, 0.1)\"\r\n      : \"0px 0px 3px 3px rgba(0, 0, 0, 0.1)\"};\r\n\r\n  display: inline-block;\r\n  position: relative;\r\n\r\n  @media ${device.tablet} {\r\n    width: 120px;\r\n    height: 50px;\r\n  }\r\n\r\n  @media ${device.mobileM} {\r\n    margin: 0.5rem 0.5rem 0.5rem 0.5rem;\r\n  }\r\n`;\r\n","const initialState = {\r\n  scraper: \"jebzdzidy\",\r\n};\r\n\r\nexport const choosenWebsiteReducer = (state = initialState, action: any) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"CHANGE_SCRAPER\":\r\n      return {\r\n        ...state,\r\n        scraper: payload.scraper,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const chooseWebsite = (website: string) => {\r\n  return {\r\n    type: \"CHANGE_SCRAPER\",\r\n    payload: {\r\n      scraper: website,\r\n    },\r\n  };\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { choosenWebsiteReducer } from \"./choosenWebsiteReducer\";\r\nimport { userReducer } from \"./userReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  choosenWebsiteReducer: choosenWebsiteReducer,\r\n  userReducer: userReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","// import IUser from \"../interfaces/UserInterface\";\r\nexport {};\r\n\r\ninterface IUserRedcuer {\r\n  type: string;\r\n  payload: {\r\n    username: string;\r\n    token: string;\r\n  };\r\n}\r\n\r\nexport const userReducer = (state = \"\", action: IUserRedcuer) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case \"SET_USER\":\r\n      return {\r\n        user: action,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setUser = (user: string) => {\r\n  console.log(user);\r\n  return {\r\n    type: \"SET_USER\",\r\n    payload: {\r\n      user,\r\n    },\r\n  };\r\n};\r\n","import { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\nconst store = createStore(persistedReducer, composeWithDevTools());\r\nexport const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport jebzdzidyLogo from \"../../utils/images/dzida.jpg\";\r\nimport kwejkLogo from \"../../utils/images/kwejk.png\";\r\nimport { Route } from \"react-router-dom\";\r\nimport {\r\n  WebsiteChooseContainer,\r\n  ChooseTitle,\r\n  WebsiteToChoose,\r\n  ImageContainer,\r\n} from \"./WebsiteChooseElements\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport store from \"../../store\";\r\nimport { chooseWebsite } from \"../../reducers/choosenWebsiteReducer\";\r\n\r\ninterface IWebsiteChoose {\r\n  changeScraperDisplay: {\r\n    (scraperName: string, history: string[]): void;\r\n  };\r\n}\r\n\r\nconst WebsiteChoose = ({ changeScraperDisplay }: IWebsiteChoose) => {\r\n  const dispatch = useDispatch();\r\n  const scraperInStore = store.getState().choosenWebsiteReducer.scraper;\r\n\r\n  const changeWebsite = (website: string) => {\r\n    dispatch(chooseWebsite(website));\r\n  };\r\n\r\n  const handleClick = (scraperName: string, history: string[]) => {\r\n    changeWebsite(scraperName);\r\n    changeScraperDisplay(scraperName, history);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ChooseTitle>Wybierz strone z której chcesz zobaczyć memy</ChooseTitle>\r\n      <WebsiteChooseContainer>\r\n        <Route\r\n          render={({ history }: any) => (\r\n            <>\r\n              <ImageContainer\r\n                show={scraperInStore === \"jebzdzidy\" ? \"active\" : \"\"}\r\n              >\r\n                <WebsiteToChoose\r\n                  show={scraperInStore === \"jebzdzidy\" ? \"active\" : \"\"}\r\n                  src={jebzdzidyLogo}\r\n                  onClick={() => handleClick(\"jebzdzidy\", history)}\r\n                />\r\n              </ImageContainer>\r\n              <ImageContainer show={scraperInStore === \"kwejk\" ? \"active\" : \"\"}>\r\n                <WebsiteToChoose\r\n                  show={scraperInStore === \"kwejk\" ? \"active\" : \"\"}\r\n                  src={kwejkLogo}\r\n                  onClick={() => handleClick(\"kwejk\", history)}\r\n                />\r\n              </ImageContainer>\r\n            </>\r\n          )}\r\n        />\r\n      </WebsiteChooseContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WebsiteChoose;\r\n","import memeService from \"../../services/memes\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Meme from \"../../components/Meme/Meme\";\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport {\r\n  MemesContainer,\r\n  ButtonsContainer,\r\n  DirectionButton,\r\n} from \"./AllMemesElements\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport WebsiteChoose from \"../WebsiteChoose/WebsiteChoose\";\r\nimport store from \"../../store\";\r\n\r\ninterface IAllMemes {\r\n  pageRefresh: any;\r\n  changeScraperDisplay?: {\r\n    (scraperName: string, history: string[], pageRefresh: string): void;\r\n  };\r\n}\r\n\r\ninterface IMeme {\r\n  map(arg0: (meme: any) => JSX.Element): React.ReactNode;\r\n  id: string;\r\n  title: string;\r\n  photoUrl: string;\r\n}\r\n\r\nconst AllMemes = ({ pageRefresh }: IAllMemes) => {\r\n  const [allMemes, setAllMemes] = useState<IMeme>({} as IMeme);\r\n  const [page, setPage] = useState<number>(1);\r\n  const [scraperName, setScraperName] = useState<string>(\"jebzdzidy\");\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  const scraperInStore: string = store.getState().choosenWebsiteReducer.scraper;\r\n\r\n  const fetchUrlAfterRefresh = (): void => {\r\n    if (pageRefresh) {\r\n      setPage(parseInt(pageRefresh));\r\n      setScraperName(scraperInStore);\r\n    }\r\n    return;\r\n  };\r\n\r\n  const fetchMemes = async (): Promise<void> => {\r\n    const memes = await memeService.getAll(page, scraperName);\r\n    setAllMemes(memes.results);\r\n    setLoading(false);\r\n  };\r\n\r\n  const changeScraperDisplay = (\r\n    scaperName: string,\r\n    history: string[]\r\n  ): void => {\r\n    setPage(1);\r\n    <Link to={\"/page/1\"}></Link>;\r\n    history.push(`/page/1`);\r\n    setScraperName(scaperName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUrlAfterRefresh();\r\n    fetchMemes();\r\n    window.scrollTo(0, 0);\r\n  }, [page, scraperName]);\r\n\r\n  const nextPage = (history: string[]): void => {\r\n    setPage(page + 1);\r\n    <Link to={`/page/${page + 1}`}></Link>;\r\n    history.push(`/page/${page + 1}`);\r\n  };\r\n\r\n  const previousPage = (history: string[]): void => {\r\n    if (page > 1) {\r\n      setPage(page - 1);\r\n      <Link to={`/page/${page - 1}`}></Link>;\r\n      history.push(`/page/${page - 1}`);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <MemesContainer>\r\n          <CircularProgress color=\"secondary\" />\r\n        </MemesContainer>\r\n      ) : (\r\n        <MemesContainer>\r\n          <WebsiteChoose changeScraperDisplay={changeScraperDisplay} />\r\n          {allMemes.map((meme) => (\r\n            <Meme\r\n              key={meme.id}\r\n              title={meme.title}\r\n              url={meme.photoUrl}\r\n              id={meme.id}\r\n            />\r\n          ))}\r\n          <Route\r\n            render={({ history }: any) => (\r\n              <ButtonsContainer>\r\n                <DirectionButton onClick={() => previousPage(history)}>\r\n                  Poprzednia strona\r\n                </DirectionButton>\r\n                <DirectionButton onClick={() => nextPage(history)}>\r\n                  Następna strona\r\n                </DirectionButton>\r\n              </ButtonsContainer>\r\n            )}\r\n          />\r\n        </MemesContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllMemes;\r\n","import colors from \"./colors\";\r\n\r\nexport interface Itheme {\r\n  colors: {\r\n    white: string;\r\n    black: string;\r\n    offWhite: string;\r\n    background: string;\r\n    darkerBackground: string;\r\n    elements: string;\r\n    darkBlue: string;\r\n    logout: string;\r\n    error: string;\r\n    success: string;\r\n  };\r\n}\r\n\r\nconst theme: Itheme = {\r\n  colors,\r\n};\r\n\r\nexport default theme;\r\n","export const colors = {\r\n  white: \"#fff\",\r\n  black: \"#000\",\r\n  offWhite: \"#f1eeee\",\r\n  background: \"#46494C\",\r\n  darkerBackground: \"#212125\",\r\n  elements: \"#B49AAF\",\r\n  darkBlue: \"#1c2236\",\r\n  logout: \"#723737\",\r\n  error: \"#c21c1c\",\r\n  success: \"#14a745\",\r\n};\r\n\r\nexport default colors;\r\n","import React from \"react\";\r\nimport styled, { createGlobalStyle, ThemeProvider } from \"styled-components\";\r\nimport theme from \"../utils/theme\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\nhtml,\r\nbody {\r\n  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n* {\r\n  margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    @import url('https://fonts.googleapis.com/css2?family=Rubik:wght@400;700&display=swap');\r\n      @import url(\"https://fonts.googleapis.com/css?family=Montserrat|Roboto\");\r\n      @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap');      margin: 0;\r\n      padding: 0;\r\n      box-sizing: border-box; \r\n      font-family: 'Noto Sans JP', sans-serif;\r\n}\r\n`;\r\n\r\nconst Layout = ({ children }: any) => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <>\r\n        <GlobalStyles />\r\n        {children}\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { Itheme } from \"../../utils/theme\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ButtonStyle = styled.button.attrs((props) => ({\r\n  color: props.color,\r\n}))`\r\n  padding: 0.4rem 1rem;\r\n  margin: 0.3rem;\r\n  border-radius: 3px;\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.offWhite};\r\n  background: ${(props) =>\r\n    props.color\r\n      ? props.color\r\n      : ({ theme }: { theme: Itheme }) => theme.colors.darkBlue};\r\n  border: none;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    color: ${(props) =>\r\n      props.color\r\n        ? props.color\r\n        : ({ theme }: { theme: Itheme }) => theme.colors.darkBlue};\r\n    background: ${({ theme }: { theme: Itheme }) => theme.colors.offWhite};\r\n    transition: 0.3s;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Itheme } from \"../../utils/theme\";\r\nimport { ButtonStyle } from \"./ButtonElements\";\r\n\r\ninterface IButton {\r\n  text: string;\r\n  onClick?: () => void;\r\n  onSubmit?: any;\r\n  type?: string;\r\n  color?: any; //todo put here string\r\n}\r\n\r\nconst Button = ({ text, onClick, color }: IButton) => {\r\n  return (\r\n    <ButtonStyle color={color} onClick={onClick}>\r\n      {text}\r\n    </ButtonStyle>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { Itheme } from \"../../utils/theme\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ModalForm = styled.form`\r\n  padding: 2rem 5rem;\r\n  background: ${({ theme }: { theme: Itheme }) => theme.colors.offWhite};\r\n  border-radius: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const InputContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  margin-bottom: 1.2rem;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  font-weight: bold;\r\n  font-size: 1rem;\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.darkerBackground};\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 0.4rem 2rem;\r\n  border: none;\r\n  border-radius: 3px;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Button from \"../Button/Button\";\r\nimport styled from \"styled-components\";\r\nimport { IUser } from \"../../interfaces/UserInterface\";\r\nimport { Itheme } from \"../../utils/theme\";\r\nimport {\r\n  ModalForm,\r\n  InputContainer,\r\n  Label,\r\n  Input,\r\n} from \"./ValidatorModalElements\";\r\n\r\ninterface IModal {\r\n  title: string;\r\n  operationType: string;\r\n  handleValidation: (credentials: IUser) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    modal: {\r\n      display: \"flex\",\r\n      alignItems: \"flex-start\",\r\n      marginTop: \"10rem\",\r\n      justifyContent: \"center\",\r\n    },\r\n  })\r\n);\r\n\r\nconst ValidationModal = ({\r\n  title,\r\n  operationType,\r\n  handleValidation,\r\n}: IModal) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState<boolean>(false);\r\n  const [username, setUsername] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleValidationMethod = async (event: any) => {\r\n    event.preventDefault();\r\n    handleValidation({ username, password });\r\n\r\n    setUsername(\"\");\r\n    setPassword(\"\");\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button text={operationType} onClick={handleOpen}></Button>\r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={open}>\r\n          <ModalForm onSubmit={handleValidationMethod}>\r\n            <InputContainer>\r\n              <Label>Login</Label>\r\n              <Input\r\n                type={\"text\"}\r\n                id=\"login\"\r\n                name=\"login\"\r\n                placeholder=\"Login ...\"\r\n                required\r\n                onChange={({ target }) => setUsername(target.value)}\r\n              />\r\n            </InputContainer>\r\n            <InputContainer>\r\n              <Label>Hasło</Label>\r\n              <Input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Hasło ...\"\r\n                required\r\n                onChange={({ target }) => setPassword(target.value)}\r\n              />\r\n            </InputContainer>\r\n            <Button type=\"submit\" text={title}></Button>\r\n          </ModalForm>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ValidationModal;\r\n","import { IUser } from \"../interfaces/UserInterface\";\r\nimport axios from \"axios\";\r\nconst loginUrl = \"/api/login\";\r\nconst registerUrl = \"/api/users\";\r\n\r\nconst login = async (credentials: IUser) => {\r\n  const request = await axios.post(loginUrl, credentials);\r\n  return request.data;\r\n};\r\n\r\nconst register = async (credentials: IUser) => {\r\n  const request = await axios.post(registerUrl, credentials);\r\n  return request.data;\r\n};\r\n\r\nexport default { login, register };\r\n","import { Itheme } from \"../../utils/theme\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Text = styled.p`\r\n  color: ${(props) => props.color};\r\n  font-weight: 400;\r\n  font-size: 1rem;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Container, Text } from \"./LoggerElements\";\r\n\r\ninterface ILogger {\r\n  text: string;\r\n  color: string;\r\n}\r\n\r\nexport const Logger = ({ text, color }: ILogger) => {\r\n  return (\r\n    <Container>\r\n      <Text color={color}>{text}</Text>\r\n    </Container>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { Itheme } from \"../../utils/theme\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  align-items: flex-end;\r\n  background: ${({ theme }: { theme: Itheme }) => theme.colors.background};\r\n`;\r\n\r\nexport const ButtonsWrapper = styled.div`\r\n  margin: 1rem;\r\n  display: flex;\r\n`;\r\n\r\nexport const ButtonAndInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport LoginModal from \"../ValidatorModal/ValidationModal\";\r\nimport validationService from \"../../services/userValidation\";\r\nimport { IUser } from \"../../interfaces/UserInterface\";\r\nimport { Logger } from \"../Logger/Logger\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUser } from \"../../reducers/userReducer\";\r\nimport { Itheme } from \"../../utils/theme\";\r\nimport {\r\n  Container,\r\n  ButtonsWrapper,\r\n  ButtonAndInfo,\r\n} from \"./LoginAndRegisterElements\";\r\n\r\nconst LoginAndRegister = () => {\r\n  const [registeredUser, setRegisteredUser] = useState<boolean>(false);\r\n  const [registeredUserFailed, setRegisteredUserFailed] = useState<boolean>(\r\n    false\r\n  );\r\n  const [loginUserFailed, setLoginUserFailed] = useState<boolean>(false);\r\n  const [isLoginCorrect, setIsLoginCorrect] = useState<boolean>(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleLogin = async (credentials: IUser) => {\r\n    try {\r\n      const loggedUser = await validationService.login(credentials);\r\n      loggedUser?.username ? setIsLoginCorrect(true) : setLoginUserFailed(true);\r\n\r\n      setTimeout(() => {\r\n        setLoginUserFailed(false);\r\n        setIsLoginCorrect(false);\r\n      }, 1500);\r\n\r\n      setTimeout(() => {\r\n        console.log(loggedUser, \"loggedUser\");\r\n        dispatch(setUser(loggedUser));\r\n      }, 1500);\r\n    } catch (e) {\r\n      console.log(\"Error while login\");\r\n    }\r\n  };\r\n\r\n  const handleRegister = async (credentials: IUser) => {\r\n    const registeredUser = await validationService.register(credentials);\r\n\r\n    registeredUser?.username\r\n      ? setRegisteredUser(true)\r\n      : setRegisteredUserFailed(true);\r\n\r\n    setTimeout(() => {\r\n      setRegisteredUser(false);\r\n      setRegisteredUserFailed(false);\r\n    }, 5000);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ButtonAndInfo>\r\n        <ButtonsWrapper>\r\n          <LoginModal\r\n            title={\"Zaloguj się\"}\r\n            operationType={\"Logowanie\"}\r\n            handleValidation={handleLogin}\r\n          />\r\n          <LoginModal\r\n            title={\"Zarejestruj się\"}\r\n            operationType={\"Rejestracja\"}\r\n            handleValidation={handleRegister}\r\n          />\r\n        </ButtonsWrapper>\r\n        {registeredUser ? (\r\n          <Logger text=\"Zarejestrowano, zaloguj się\" color=\"green\" />\r\n        ) : null}\r\n        {registeredUserFailed ? (\r\n          <Logger text=\"Błąd podczas rejestracji\" color=\"red\" />\r\n        ) : null}\r\n        {isLoginCorrect ? (\r\n          <Logger text=\"Użytkownik zalogowany pomyślnie\" color=\"green\" />\r\n        ) : null}\r\n        {loginUserFailed ? (\r\n          <Logger text=\"Zły login lub hasło\" color=\"red\" />\r\n        ) : null}\r\n      </ButtonAndInfo>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LoginAndRegister;\r\n","import Button from \"../Button/Button\";\r\nimport { Itheme } from \"../../utils/theme\";\r\nimport { Link, Route } from \"react-router-dom\";\r\n\r\nconst UserInterface = () => {\r\n  const handleLogout = () => {\r\n    localStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  const addMeme = (history: any) => {\r\n    // const pickSingleMeme = (history: any, id: string | undefined) => {\r\n    <Link to={`/interface/addMeme`}></Link>;\r\n    history.push(`/interface/addMeme`);\r\n    // };\r\n  };\r\n\r\n  //todo make better ux and ui\r\n  return (\r\n    <Route\r\n      render={({ history }) => (\r\n        <>\r\n          <Button text={\"Dodaj mema\"} onClick={() => addMeme(history)} />\r\n          <Button\r\n            text={\"Wyloguj się\"}\r\n            color={({ theme }: { theme: Itheme }) => theme.colors.logout}\r\n            onClick={handleLogout}\r\n          />\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default UserInterface;\r\n","import { Itheme } from \"../../utils/theme\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  align-items: flex-end;\r\n  background: ${({ theme }: { theme: Itheme }) => theme.colors.background};\r\n`;\r\n\r\nexport const UsernameForm = styled.p`\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.offWhite};\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  margin: 2rem;\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.darkerBackground};\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport UserAddMeme from \"../UserInterface/UserInterface\";\r\nimport { Itheme } from \"../../utils/theme\";\r\nimport { Container, UsernameForm } from \"./LoggedUserElements\";\r\n\r\ninterface ILoggedUser {\r\n  username: string;\r\n}\r\n\r\nconst LoggedUser = ({ username }: ILoggedUser) => {\r\n  return (\r\n    <Container>\r\n      <UsernameForm>Nazwa użytkownika: {username}</UsernameForm>\r\n      <UserAddMeme />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LoggedUser;\r\n","import React from \"react\";\r\nimport AllMemes from \"../components/AllMemes/AllMemes\";\r\nimport Layout from \"../layout/Layout\";\r\nimport LoginAndRegister from \"../components/LoginAndRegister/LoginAndRegister\";\r\nimport { useSelector } from \"react-redux\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\nimport { IUserReducer } from \"../interfaces/UserInterface\";\r\nimport LoggedUser from \"../components/LoggedUser/LoggedUser\";\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\ninterface IMainPage {\r\n  match?: {\r\n    isExact: boolean;\r\n    params: {\r\n      page: string;\r\n    };\r\n    path: string;\r\n    url: string;\r\n  };\r\n}\r\n\r\nconst MainPage = ({ match }: IMainPage) => {\r\n  const isUserLogged: IUserReducer = useSelector(\r\n    (state: RootState) => state.userReducer\r\n  );\r\n  const username = isUserLogged.user;\r\n  return (\r\n    <Layout>\r\n      {username ? (\r\n        <LoggedUser username={username.payload.user.username} />\r\n      ) : (\r\n        <LoginAndRegister />\r\n      )}\r\n      <AllMemes pageRefresh={match ? match?.params.page : 1} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import styled from \"styled-components\";\r\nimport { Itheme } from \"../../utils/theme\";\r\n\r\nexport const MemeContainer = styled.div`\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 0;\r\n  background: ${({ theme }: { theme: Itheme }) => theme.colors.background};\r\n  padding: 4rem 0;\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Meme from \"../../components/Meme/Meme\";\r\nimport Layout from \"../../layout/Layout\";\r\nimport memeService from \"../../services/memes\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { MemeContainer } from \"./ChoosenMemeElements\";\r\n\r\ninterface IChoosenMeme {\r\n  title?: string;\r\n  photoUrl?: string;\r\n  id: string;\r\n}\r\n\r\nconst ChoosenMeme = ({ id }: IChoosenMeme) => {\r\n  const [singleMeme, setSingleMeme] = useState<IChoosenMeme>(\r\n    {} as IChoosenMeme\r\n  );\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    async function getSingleMeme() {\r\n      const result = await memeService.getSingle(id);\r\n      setSingleMeme(result);\r\n      setLoading(false);\r\n    }\r\n    getSingleMeme();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <MemeContainer>\r\n          <CircularProgress color=\"secondary\" />\r\n        </MemeContainer>\r\n      ) : (\r\n        <Layout>\r\n          <MemeContainer>\r\n            <Meme\r\n              margin={\"0\"}\r\n              title={singleMeme.title}\r\n              url={singleMeme.photoUrl}\r\n            />\r\n          </MemeContainer>\r\n        </Layout>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChoosenMeme;\r\n","import React from \"react\";\r\nimport Layout from \"../layout/Layout\";\r\nimport styled from \"styled-components\";\r\nimport ChoosenMeme from \"../components/ChoosenMeme/ChoosenMeme\";\r\nimport LoggedUser from \"../components/LoggedUser/LoggedUser\";\r\nimport { IUserReducer } from \"../interfaces/UserInterface\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"./MainPage\";\r\n\r\n// const MemeContainer = styled.div`\r\n//   height: 100vh;\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   margin-bottom: 0;\r\n//   background: ${({ theme }) => theme.colors.background};\r\n// `;\r\n\r\ninterface IsingleMemePage {\r\n  match: {\r\n    isExact: boolean;\r\n    params: {\r\n      id: string;\r\n    };\r\n    path: string;\r\n    url: string;\r\n  };\r\n}\r\n\r\nconst SingleMemePage = ({ match }: IsingleMemePage) => {\r\n  const isUserLogged: IUserReducer = useSelector(\r\n    (state: RootState) => state.userReducer\r\n  );\r\n  const username = isUserLogged.user;\r\n\r\n  return (\r\n    <Layout>\r\n      <LoggedUser username={username.payload.user.username} />\r\n      <ChoosenMeme id={match.params.id} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default SingleMemePage;\r\n","import { Itheme } from \"../../utils/theme\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const AddMemeContainer = styled.div`\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 0;\r\n  background: ${({ theme }: { theme: Itheme }) => theme.colors.background};\r\n  padding: 4rem 0;\r\n`;\r\n\r\nexport const InputFile = styled.input`\r\n  padding: 0.4rem 1rem;\r\n  margin: 0.3rem;\r\n  border-radius: 3px;\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.offWhite};\r\n  background: ${(props) =>\r\n    props.color\r\n      ? props.color\r\n      : ({ theme }: { theme: Itheme }) => theme.colors.darkerBackground};\r\n  border: none;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const AddMemeForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 600px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  -webkit-appearance: none;\r\n  border: none;\r\n  font-size: 1rem;\r\n  padding: 1rem;\r\n  margin: 1rem 0;\r\n  border-radius: 3px;\r\n`;\r\n\r\nexport const MissingValueError = styled.p`\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.error};\r\n  margin: 0.5rem;\r\n`;\r\n\r\nexport const Success = styled.p`\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: ${({ theme }: { theme: Itheme }) => theme.colors.success};\r\n  margin: 0.5rem;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin-bottom: 2rem;\r\n`;\r\n","import axios from \"axios\";\r\nconst addMemeUrl = \"/memes/add\";\r\n\r\nconst addMemeToDb = async (memeObject: any, config: any) => {\r\n  console.log(memeObject);\r\n  const request = await axios.post(addMemeUrl, memeObject, config);\r\n  return request.data;\r\n};\r\n\r\nexport default { addMemeToDb };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  AddMemeContainer,\r\n  InputFile,\r\n  Image,\r\n  AddMemeForm,\r\n  Input,\r\n  MissingValueError,\r\n  Success,\r\n} from \"./AddMemeElements\";\r\nimport addMemeService from \"../../services/addMeme\";\r\nimport { IUserReducer } from \"../../interfaces/UserInterface\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../pages/MainPage\";\r\nimport Button from \"../Button/Button\";\r\n\r\ninterface IobjectToSend {\r\n  title: string;\r\n  photoUrl: string;\r\n  //   token: string;\r\n}\r\n\r\nconst AddMemePage = () => {\r\n  const [image, setImage] = useState<string>(\"\");\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [missingImageErr, setMissingImageErr] = useState<boolean>(false);\r\n  const [missingTitleErr, setMissingTitleErr] = useState<boolean>(false);\r\n  const [succesAdded, setSuccessAdded] = useState<boolean>(false);\r\n\r\n  const isUserLogged: IUserReducer = useSelector(\r\n    (state: RootState) => state.userReducer\r\n  );\r\n  const user = isUserLogged.user;\r\n\r\n  // useEffect\r\n  const handleAddTitle = (event: EventTarget & HTMLInputElement): void => {\r\n    setTitle(event.value);\r\n  };\r\n\r\n  const handleAddImage = (event: any): void => {\r\n    console.log(event);\r\n    const file = URL.createObjectURL(event.target.files[0]);\r\n    console.log(event.target.files[0]);\r\n    setImage(file);\r\n  };\r\n\r\n  const handleAddMeme = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault();\r\n\r\n    if (image && title) {\r\n      //tutaj dodajemy mema do bazy\r\n      const config = {\r\n        headers: { Authorization: `bearer ${user.payload.user.token}` },\r\n      };\r\n\r\n      const objectToSend: IobjectToSend = {\r\n        title,\r\n        photoUrl: image,\r\n      };\r\n      const addMemeResult = addMemeService.addMemeToDb(objectToSend, config);\r\n\r\n      setImage(\"\");\r\n      setTitle(\"\");\r\n      setSuccessAdded(true);\r\n    } else if (!image && !title) {\r\n      setMissingImageErr(true);\r\n      setMissingTitleErr(true);\r\n    } else if (!image) {\r\n      setMissingImageErr(true);\r\n    } else {\r\n      setMissingTitleErr(true);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setMissingImageErr(false);\r\n      setMissingTitleErr(false);\r\n    }, 1500);\r\n  };\r\n\r\n  //   onChange={({ target }) => setUsername(target.value)}\r\n  return (\r\n    <AddMemeContainer>\r\n      <AddMemeForm onSubmit={handleAddMeme}>\r\n        <Input\r\n          placeholder=\"Dodaj tytuł\"\r\n          type=\"text\"\r\n          value={title || \"\"}\r\n          onChange={({ target }) => handleAddTitle(target)}\r\n        />\r\n        <Image src={image} alt=\"\" />\r\n        <InputFile\r\n          type=\"file\"\r\n          id=\"input\"\r\n          accept=\"image/*\"\r\n          onChange={(event) => handleAddImage(event)}\r\n        ></InputFile>\r\n        <Button type=\"submit\" text={\"Dodaj mema\"}></Button>\r\n      </AddMemeForm>\r\n      {missingImageErr ? (\r\n        <MissingValueError>Brakuje obrazka !</MissingValueError>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {missingTitleErr ? (\r\n        <MissingValueError>Brakuje tytułu !</MissingValueError>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {succesAdded ? <Success>Mem został dodany !</Success> : \"\"}\r\n    </AddMemeContainer>\r\n  );\r\n};\r\n\r\nexport default AddMemePage;\r\n","import AddMeme from \"../components/AddMeme/AddMeme\";\r\nimport Layout from \"../layout/Layout\";\r\n\r\nconst AddMemePage = () => {\r\n  return (\r\n    <Layout>\r\n      <AddMeme />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default AddMemePage;\r\n","import React from \"react\";\nimport MainPage from \"./pages/MainPage\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SingleMemePage from \"./pages/SingleMemePage\";\nimport AddMemePage from \"./pages/AddMemePage\";\nimport Layout from \"./layout/Layout\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <MainPage />\n          </Route>\n          <Route exact path=\"/page/:page\" component={MainPage} />\n          <Route exact path=\"/:id\" component={SingleMemePage} />\n          <Route exact path=\"/interface/addMeme\">\n            <AddMemePage />\n          </Route>\n        </Switch>\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { persistor } from \"./store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}